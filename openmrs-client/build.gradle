buildscript {
    repositories {
        mavenCentral()
        maven { url 'https://jitpack.io' }
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    }

    dependencies {
        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.8'
    }
}

buildscript {
    repositories {
        google()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
}

plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'com.google.devtools.ksp'
    id 'kotlin-parcelize'
    id 'com.google.dagger.hilt.android'
    id 'jacoco'
    id "org.sonarqube" version "5.0.0.4638"
}

apply from: './versions.gradle'
apply from: './config.gradle'
apply plugin: "androidx.navigation.safeargs"
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: 'com.google.gms.google-services'

sonar {
    properties {
        property "sonar.projectKey", "BLOPUP-UPC_blopup-android-app"
        property "sonar.organization", "blopup-upc"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.gradle.skipCompile", "true"
        property "sonar.coverage.jacoco.xmlReportPaths", "build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml"
    }
}

tasks.register('jacocoTestReport', JacocoReport) {
    dependsOn 'testDebugUnitTest'
    group = "Reporting"

    description = "Generate Jacoco test coverage reports for the debug build"

    reports {
        xml.required = true
    }

    sourceDirectories.setFrom(files("${project.projectDir}/src/main/java"))

    classDirectories.setFrom(fileTree(dir: "$buildDir/tmp/kotlin-classes/debug", excludes:
            [// Android
             "**/R.class",
             "**/R\$*.class",
             "**/BuildConfig.*",
             "**/Manifest*.*"
            ]))

    executionData.setFrom(fileTree(dir: "$buildDir", includes: [
            "jacoco/testDebugUnitTest.exec",
            "outputs/unit_test_code_coverage/debugUnitTest/testDebugUnitTest.exec"
    ]))
}

tasks.withType(Test).configureEach {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}

android {

    namespace 'edu.upc'

    defaultConfig {
        applicationId "edu.upc"
        versionName "2.0.1"
        versionCode 2001

        minSdkVersion versions.minSdk
        targetSdkVersion versions.targetSdk
        compileSdkVersion versions.compileSdk

        vectorDrawables.useSupportLibrary = true

        javaCompileOptions {
            annotationProcessorOptions {
                arguments += ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testInstrumentationRunnerArguments clearPackageData: 'true'
    }

    configurations.configureEach {
        resolutionStrategy.force 'com.google.code.findbugs:jsr305:3.0.2'
    }

    signingConfigs {
        release {
            storeFile file(System.getenv("KEYSTORE_FILE") ?: "keystore/local_keystore.jks")
            storePassword System.getenv("KEYSTORE_PASSWORD") ?: "Admin123"
            keyAlias System.getenv("KEYSTORE_ALIAS_NAME") ?: "blopup-key-alias"
            keyPassword System.getenv("KEYSTORE_ALIAS_PASS") ?: "Admin123"
        }
    }

    bundle {
        language {
            enableSplit = false
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            // Enables resource shrinking, which is performed by the
            // Android Gradle plugin.
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
            firebaseCrashlytics {
                mappingFileUploadEnabled false
            }
        }
        debug {
            applicationIdSuffix '.debug'
            firebaseCrashlytics {
                mappingFileUploadEnabled false
            }
            enableUnitTestCoverage true
        }
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
        warning 'InvalidPackage'
    }

    packagingOptions {
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/rxjava.properties'
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }

    compileOptions {
        coreLibraryDesugaringEnabled true
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }

    testOptions {
        unitTests {
            returnDefaultValues = true
            includeAndroidResources = true
        }
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
            }
        }
    }

    buildFeatures {
        viewBinding = true
        buildConfig = true
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.5.8'
    }
}

repositories {
    maven { url 'https://yanzm.github.io/MaterialTabHost/repository' }
    mavenCentral()
    jcenter()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    google()
}

dependencies {

    implementation "androidx.appcompat:appcompat:1.6.1"
    implementation "com.google.android.material:material:${versions.material}"
    implementation "androidx.legacy:legacy-support-v13:${versions.supportVersion}"
    implementation "androidx.gridlayout:gridlayout:${versions.supportVersion}"
    implementation "androidx.recyclerview:recyclerview:${versions.recyclerView}"
    implementation "androidx.cardview:cardview:${versions.supportVersion}"
    implementation "androidx.constraintlayout:constraintlayout:${versions.constraintlayout}"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "androidx.fragment:fragment-ktx:${versions.fragment}"
    implementation "androidx.activity:activity-ktx:${versions.activity}"
    implementation "androidx.preference:preference-ktx:${versions.preference}"

    // Networking and Processing
    implementation "com.squareup.retrofit2:retrofit:${versions.retrofit}"
    implementation "com.squareup.retrofit2:converter-gson:${versions.retrofit}"
    implementation "com.google.code.gson:gson:${versions.gson}"

    //Navigation Component
    implementation "androidx.navigation:navigation-fragment-ktx:${versions.navfragment}"
    implementation "androidx.navigation:navigation-ui-ktx:${versions.navui}"

    // Rx Java dependency
    implementation "io.reactivex.rxjava2:rxjava:${versions.rxjava}"
    implementation "io.reactivex.rxjava2:rxandroid:${versions.rxandroid}"
    implementation "com.jakewharton.rxbinding:rxbinding:${versions.rxbinding}"

    // Database components
    implementation "androidx.room:room-runtime:${versions.roomRuntime}"
    implementation "android.arch.persistence.room:rxjava2:${versions.roomPersistence}"
    implementation "androidx.room:room-rxjava2:${versions.roomRuntime}"
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.7.0'
    implementation 'androidx.activity:activity-compose:1.9.0'
    implementation platform('androidx.compose:compose-bom:2024.04.01')
    implementation 'androidx.compose.ui:ui'
    implementation 'androidx.compose.ui:ui-graphics'
    implementation 'androidx.compose.ui:ui-tooling-preview'
    implementation 'androidx.compose.material3:material3'
    implementation 'androidx.navigation:navigation-compose:2.7.7'
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'androidx.compose.ui:ui-test-junit4'
    debugImplementation 'androidx.compose.ui:ui-tooling'
    debugImplementation 'androidx.compose.ui:ui-test-manifest'

    //no inspection
    ksp "androidx.room:room-compiler:${versions.roomCompiler}"

    // Work Manager
    implementation "androidx.work:work-runtime:${versions.workManager}"

    // Third Party UI Libraries
    implementation "com.github.PhilJay:MPAndroidChart:${versions.MPAndroidChart}"
    implementation "org.mindrot:jbcrypt:${versions.jbcrypt}"
    implementation "commons-codec:commons-codec:${versions.codec}"
    implementation "org.jdeferred:jdeferred-android-aar:${versions.jdeferred}"
    implementation "com.github.anastr:speedviewlib:1.6.0"

    // Hilt Dependency Injection
    implementation "com.google.dagger:hilt-android:${versions.hilt}"
    kapt 'com.google.dagger:dagger-android-processor:2.51.1'
    kapt "com.google.dagger:hilt-compiler:${versions.hilt}"
    implementation "androidx.hilt:hilt-navigation-compose:1.2.0"

    // ViewModel
    implementation("androidx.lifecycle:lifecycle-viewmodel-ktx:${versions.lifecycle_version}")
    implementation("androidx.lifecycle:lifecycle-viewmodel-compose:2.7.0")

    // LiveData
    implementation("androidx.lifecycle:lifecycle-livedata-ktx:${versions.lifecycle_version}")

    // Microlife dependencies
    implementation('com.ideabus.ideabus_structure:ideabuslibrary:2.0.7') {
        exclude group: 'com.android.support', module: 'support-compat'
    }
    implementation files('libs/scale-sdk_v1.1.6_1907291543.aar')
    implementation files('libs/sdk-release.aar')

    // add the Firebase SDK for Google Analytics
    // The app need this to init in Firebase console
    implementation("com.google.firebase:firebase-crashlytics")
    implementation("com.google.firebase:firebase-analytics")

    // Android coroutines
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.8.0'
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.8.0"
    testImplementation("org.jetbrains.kotlinx:kotlinx-coroutines-test:1.8.0")

    // Kotlin arrow
    implementation "io.arrow-kt:arrow-core:1.0.1"

    implementation platform('com.google.firebase:firebase-bom:33.1.0')

    // Test Implementations
    androidTestImplementation(
            'androidx.test.ext:junit-ktx:1.1.5',
            'androidx.test:runner:1.5.2',
            'org.mockito:mockito-core:5.11.0',
            'com.google.dexmaker:dexmaker-mockito:1.2',
            'com.google.dexmaker:dexmaker:1.2',
            'com.jayway.android.robotium:robotium-solo:5.6.3')
    testImplementation(
            'org.mockito:mockito-core:5.11.0',
            'org.mockito:mockito-inline:5.2.0',
            "org.mockito.kotlin:mockito-kotlin:4.1.0",
            'junit:junit:4.+',
            "org.junit.jupiter:junit-jupiter:5.10.2",
            "com.google.dagger:hilt-android-testing:${versions.hilt}",
            "androidx.arch.core:core-testing:${versions.arch_version}",
            'io.mockk:mockk:1.13.9',
            'org.robolectric:robolectric:4.12.1',
            "androidx.work:work-testing:${versions.workManager}",
            'androidx.test.ext:junit-ktx:1.1.5',
            "com.squareup.okhttp3:mockwebserver:4.11.0",
            "androidx.test.espresso:espresso-intents:3.5.1",
            'org.slf4j:slf4j-simple:2.0.13'
    )
    testImplementation "android.arch.core:core-testing:${versions.coreTesting}"
    kaptTest "com.google.dagger:hilt-compiler:${versions.hilt}"

    // Leak Canary
//     debugImplementation "com.squareup.leakcanary:leakcanary-android:2.12"
    // Debug database
    debugImplementation 'com.github.amitshekhariitbhu.Android-Debug-Database:debug-db:v1.0.6'
    debugImplementation 'androidx.fragment:fragment-testing:1.6.2'
    debugImplementation "androidx.test:monitor:1.6.1"

    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:2.0.4'

}

kapt {
    correctErrorTypes true
}
